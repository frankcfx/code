Scala
===========================================
面向对象
  Java
    class
	  属性
	  方法
	  静态属性
	  静态方法
	  构造方法
	interface
	enum
  Scala
    class
	  和Java的class基本一样，区别在于class中不能存在static修饰的静态属性/方法
	  单继承、默认具有一个无参数的主构造函数
	  构造函数的一个区别在于，scala中的构造函数名称为this
	object
	  对象，为了解决scala的class中不能存在static关键字问题的；直白来讲，object对象在JVM中只存在一份，内部的所有的属性、方法均为static修饰，均是静态的
	trait
	  当做Java的接口来使用即可
	  区别：
	    -1. 在trait中可以包含已经实现的方法或者没有实现的方法
		-2. 一个类可以继承/实现多个trait
	
备注：scala不支持static关键字	
	
作用域：可以放到属性、方法、函数、class、object、trait上(关键字之前即可)
  public：默认就是，但是不能写public关键字	
  protected：和java一模一样，但是scala不太推荐使用
  private：和java一模一样，class私有访问，只要在当前class中均可以访问
  private[this/class名称/包名称]: 在private关键字的基础上做一个限制，this表示只有当前对象可以访问，class名称和private类似，包名称表示对应包下的所有class中均可以访问
	
Class构造函数
  默认有一个无参数的主构造函数
  构造函数分为主构造函数和辅助构造函数，辅助构造函数的名称为this，可以有多个
  主构造函数是位于class名称后面定义的一个参数输入列表以及class代码体中所有的可运行代码块均属于主构造函数
  主构造函数：
    主构造函数中定义的输入参数，最终是作为class的属性存在的，并且默认情况下为：private+val修饰，但是可改；当设置为val/var的时候，作用域默认为public的
	参数可以给定默认值
	主构造函数，默认为public修饰，可以在class名称和参数列表之间加入作用域修饰词
  辅助构造函数：
    以this为名称，并且没有返回值的函数
	辅助构造函数的第一行必须调用主构造函数或者定义在之前的辅助构造函数

对象构建初始化流程
  基本和java一样
    -1. 首先初始化父类中的构造函数(从右往左)
    -2. 再初始化当前类
    -3. 首先初始化主构造函数
    -4. 最后初始化辅助构造函数	
	
半生对象和半生类
  在一个scala文件中，分别存在一个class和一个object对象，并且class和object的名称一样，那么object就叫做class的半生对象，class叫做object的半生类
  作用：半生对象和半生类之间可以互相访问私有的属性/方法  
	
apply方法
  定义在object中
    表示提供一个便捷的对象构建方式，不需要通过new的方式来构建；直接通过object的名称+参数列表即可构建对象
  定义在class中
    表示提供一种便捷的数据获取方式，类似list集合的数据获取, eg: list(0)
update方法
  定义在class中
    表示提供一种便捷的数据修改/更新的方式，类似数组的数据更新, eg: arr(0) = 100; update方法要求至少两个参数，调用过程中其中最后一个输入参数写在等号后面，其它写在前面  

枚举
  scala不支持enum关键字，可以通过继承Enumeration类，并且要求必须是object
  
case class
  其实就是class和object的一个整合，在编译的时候会额外的生成一个伴生对象存在，并且在对象中添加一个和主构造函数同输入参数列表的apply方法；可以简化object的编写
  case class中的属性默认是public val修饰，可以更改
  case class最多只支持22个参数的class
  一般情况下可用于模式匹配
  
泛型
  基本和java一样，区别java中使用<>表示泛型，scala中使用[]表示泛型
  scala中泛型可以出现在class、方法、函数名称之后
    class Queue[T]
	def add[T](t:T)
  上下界：
    [A1 >: A]：表示A是A1的下界，也就是A是A1的子类
	[A1 <: A]: 表示A是A1的上界，也就是A是A1的父类
  协变/逆变：
    [+T]: 协变，如果类C定义为C[+T]，并且A是B的父类，那么C[A]是C[B]的父类
	[-T]: 逆变，如果类C定义为C[-T]，并且A是B的父类，那么C[B]是C[A]的父类
	[T]: 正常的，如果类C定义为C[T]，并且A是B的父类，那么C[B]和C[A]之间没有关系
	
隐式转换
  只能转换一次
  隐式转换函数
    将一个对象转换为另外一个对象的函数，主要应用于：函数参数的调用或者对象方法的调用；要求：当前作用域或者对象所属类的伴生对象中存在隐式转换函数
  隐式转换参数  
    在函数的定义过程中，定义参数为隐式转换参数，在调用过程中，就可以不给定参数的值，当不给定的时候，就会从当前作用域中查找定义的隐式转换对象/函数，比如：scala中的默认的数据排序器
	当然我们在函数调用过程中，是可以给定具体的参数值的
  
========================================
Scala总结
  -1. val和var的区别&scala和java的区别
  -2. 函数
    基本的函数定义
	匿名函数
	高阶函数
  -3. 集合
    Array/List
	ArrayBuffer
	集合中的高阶API（eg: map、flatMap、filter、foreach、fold...）
    集合中/RDD中map和flatMap这两个API的区别
  -4. 元组
  -5. 隐式转换
  -6. 递归和尾递归优化

